#!/usr/bin/env ruby

require_relative '../lib/modules/file_helper'
require_relative '../lib/modules/validations_helper'
require_relative '../lib/modules/variables_helper'
require_relative '../lib/modules/util'
require_relative '../lib/list_errors'

input_array = ARGV
if !FileValidation.validate_path?(input_array[0])
  puts "We need a file: #{__FILE__} <name>"
  exit(2)
elsif !FileValidation.file_is_sass_file?(input_array[0])
  puts 'Please choose a file with the type : .scss'
  exit(2)
elsif !FileValidation.file_exists?(input_array[0])
  puts 'The file does not exists'
  exit(2)
elsif !FileValidation.file_is_readable?(input_array[0])
  puts "We can't not read this file"
  exit(2)
elsif FileValidation.file_have_zero_lines?(input_array[0])
  puts 'The file is valid but is empty'
  exit(2)
end

results = Linters.new
temp_array = []

total_lines = File.open(input_array[0]).count

File.open(input_array[0]).each { |x| temp_array << x }

row = 1
temp_array.each do |line|
  results.add_errors_list(LineValidations.comment_white_space_inside_after(line, row))
  results.add_errors_list(LineValidations.comment_white_space_inside_before(line, row))
  results.add_errors_list(LineValidations.unexpected_missing_end_of_source_newline(line, row)) if total_lines == row
  row += 1
end

results2 = LineValidations.expected_empty_line_before_comment(File.open(input_array[0]))

results2.show_list_errors.each do |x|
  results.add_errors_list(x) unless x.nil?
end

results3 = LineValidations.expected_indentation_of_zero_spaces(File.open(input_array[0]))

results3.show_list_errors.each do |x|
  results.add_errors_list(x) unless x.nil?
end

results4 = LineValidations.expected_indentation_of_2_spaces(File.open(input_array[0]))

results4.show_list_errors.each do |x|
  results.add_errors_list(x) unless x.nil?
end

# arr = LineValidations.show_list_errors

# ordered_by_row = Util.order_array_by_row(results.show_list_errors)
# ordered_by_column = LineValidations.order_array_by_column(ordered_by_row)

# ordered_by_row.each { |x| p x.show_message unless x.nil? }
results.show_list_errors.each { |x| p x.show_message unless x.nil? }
